// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The canonical version of this proto can be found at
// https://github.com/grpc/grpc-proto/blob/master/grpc/health/v1/health.proto

// @generated by protoc-gen-es v2.6.3 with parameter "target=ts,import_extension=js"
// @generated from file grpc/health/v1/health.proto (package grpc.health.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file grpc/health/v1/health.proto.
 */
export const file_grpc_health_v1_health: GenFile = /*@__PURE__*/
  fileDesc("ChtncnBjL2hlYWx0aC92MS9oZWFsdGgucHJvdG8SDmdycGMuaGVhbHRoLnYxIiUKEkhlYWx0aENoZWNrUmVxdWVzdBIPCgdzZXJ2aWNlGAEgASgJIqkBChNIZWFsdGhDaGVja1Jlc3BvbnNlEkEKBnN0YXR1cxgBIAEoDjIxLmdycGMuaGVhbHRoLnYxLkhlYWx0aENoZWNrUmVzcG9uc2UuU2VydmluZ1N0YXR1cyJPCg1TZXJ2aW5nU3RhdHVzEgsKB1VOS05PV04QABILCgdTRVJWSU5HEAESDwoLTk9UX1NFUlZJTkcQAhITCg9TRVJWSUNFX1VOS05PV04QAzKuAQoGSGVhbHRoElAKBUNoZWNrEiIuZ3JwYy5oZWFsdGgudjEuSGVhbHRoQ2hlY2tSZXF1ZXN0GiMuZ3JwYy5oZWFsdGgudjEuSGVhbHRoQ2hlY2tSZXNwb25zZRJSCgVXYXRjaBIiLmdycGMuaGVhbHRoLnYxLkhlYWx0aENoZWNrUmVxdWVzdBojLmdycGMuaGVhbHRoLnYxLkhlYWx0aENoZWNrUmVzcG9uc2UwAUJhChFpby5ncnBjLmhlYWx0aC52MUILSGVhbHRoUHJvdG9QAVosZ29vZ2xlLmdvbGFuZy5vcmcvZ3JwYy9oZWFsdGgvZ3JwY19oZWFsdGhfdjGqAg5HcnBjLkhlYWx0aC5WMWIGcHJvdG8z");

/**
 * @generated from message grpc.health.v1.HealthCheckRequest
 */
export type HealthCheckRequest = Message<"grpc.health.v1.HealthCheckRequest"> & {
  /**
   * @generated from field: string service = 1;
   */
  service: string;
};

/**
 * Describes the message grpc.health.v1.HealthCheckRequest.
 * Use `create(HealthCheckRequestSchema)` to create a new message.
 */
export const HealthCheckRequestSchema: GenMessage<HealthCheckRequest> = /*@__PURE__*/
  messageDesc(file_grpc_health_v1_health, 0);

/**
 * @generated from message grpc.health.v1.HealthCheckResponse
 */
export type HealthCheckResponse = Message<"grpc.health.v1.HealthCheckResponse"> & {
  /**
   * @generated from field: grpc.health.v1.HealthCheckResponse.ServingStatus status = 1;
   */
  status: HealthCheckResponse_ServingStatus;
};

/**
 * Describes the message grpc.health.v1.HealthCheckResponse.
 * Use `create(HealthCheckResponseSchema)` to create a new message.
 */
export const HealthCheckResponseSchema: GenMessage<HealthCheckResponse> = /*@__PURE__*/
  messageDesc(file_grpc_health_v1_health, 1);

/**
 * @generated from enum grpc.health.v1.HealthCheckResponse.ServingStatus
 */
export enum HealthCheckResponse_ServingStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: SERVING = 1;
   */
  SERVING = 1,

  /**
   * @generated from enum value: NOT_SERVING = 2;
   */
  NOT_SERVING = 2,

  /**
   * Used only by the Watch method.
   *
   * @generated from enum value: SERVICE_UNKNOWN = 3;
   */
  SERVICE_UNKNOWN = 3,
}

/**
 * Describes the enum grpc.health.v1.HealthCheckResponse.ServingStatus.
 */
export const HealthCheckResponse_ServingStatusSchema: GenEnum<HealthCheckResponse_ServingStatus> = /*@__PURE__*/
  enumDesc(file_grpc_health_v1_health, 1, 0);

/**
 * @generated from service grpc.health.v1.Health
 */
export const Health: GenService<{
  /**
   * If the requested service is unknown, the call will fail with status
   * NOT_FOUND.
   *
   * @generated from rpc grpc.health.v1.Health.Check
   */
  check: {
    methodKind: "unary";
    input: typeof HealthCheckRequestSchema;
    output: typeof HealthCheckResponseSchema;
  },
  /**
   * Performs a watch for the serving status of the requested service.
   * The server will immediately send back a message indicating the current
   * serving status.  It will then subsequently send a new message whenever
   * the service's serving status changes.
   *
   * If the requested service is unknown when the call is received, the
   * server will send a message setting the serving status to
   * SERVICE_UNKNOWN but will *not* terminate the call.  If at some
   * future point, the serving status of the service becomes known, the
   * server will send a new message with the service's serving status.
   *
   * If the call terminates with status UNIMPLEMENTED, then clients
   * should assume this method is not supported and should not retry the
   * call.  If the call terminates with any other status (including OK),
   * clients should retry the call with appropriate exponential backoff.
   *
   * @generated from rpc grpc.health.v1.Health.Watch
   */
  watch: {
    methodKind: "server_streaming";
    input: typeof HealthCheckRequestSchema;
    output: typeof HealthCheckResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_grpc_health_v1_health, 0);

